document.addEventListener('DOMContentLoaded', function() {\n    // Theme switching functionality\n    const themeToggle = document.getElementById('theme-toggle');\n    const currentTheme = localStorage.getItem('theme') || 'light';\n    \n    // Apply saved theme\n    document.documentElement.setAttribute('data-theme', currentTheme);\n    \n    if (themeToggle) {\n        themeToggle.addEventListener('click', function() {\n            const currentTheme = document.documentElement.getAttribute('data-theme');\n            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';\n            \n            document.documentElement.setAttribute('data-theme', newTheme);\n            localStorage.setItem('theme', newTheme);\n            \n            // Update toggle button icon/text\n            this.innerHTML = newTheme === 'dark' ? '‚òÄÔ∏è' : 'üåô';\n        });\n    }\n    \n    // Initialize DataTables if present\n    if (typeof $.fn.dataTable !== 'undefined') {\n        $('.data-table').DataTable({\n            \"responsive\": true,\n            \"autoWidth\": false,\n            \"pageLength\": 25,\n            \"order\": [[ 0, \"desc\" ]],\n            \"language\": {\n                \"url\": \"//cdn.datatables.net/plug-ins/1.13.7/i18n/ru.json\"\n            }\n        });\n    }\n    \n    // Form submission handling\n    const forms = document.querySelectorAll('form[data-api]');\n    forms.forEach(function(form) {\n        form.addEventListener('submit', function(e) {\n            e.preventDefault();\n            \n            const formData = new FormData(form);\n            const action = form.getAttribute('action') || '';\n            const method = form.getAttribute('method') || 'POST';\n            \n            // Show loading indicator\n            const submitButton = form.querySelector('button[type=\"submit\"]');\n            const originalText = submitButton.innerHTML;\n            submitButton.innerHTML = '<span class=\"spinner spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span> –ó–∞–≥—Ä—É–∑–∫–∞...';\n            submitButton.disabled = true;\n            \n            // Hide previous alerts\n            const alerts = form.querySelectorAll('.alert');\n            alerts.forEach(alert => alert.remove());\n            \n            // Submit form via AJAX\n            fetch(action, {\n                method: method,\n                body: formData\n            })\n            .then(response => response.json())\n            .then(data => {\n                // Restore submit button\n                submitButton.innerHTML = originalText;\n                submitButton.disabled = false;\n                \n                if (data.success) {\n                    // Show success message\n                    const successAlert = document.createElement('div');\n                    successAlert.className = 'alert alert-success alert-dismissible fade show';\n                    successAlert.innerHTML = `\n                        <strong>–£—Å–ø–µ—Ö!</strong> ${data.message}\n                        <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    `;\n                    form.prepend(successAlert);\n                    \n                    // Reset form if requested\n                    if (data.resetForm) {\n                        form.reset();\n                    }\n                    \n                    // Reload page if requested\n                    if (data.reload) {\n                        setTimeout(() => {\n                            location.reload();\n                        }, 1500);\n                    }\n                } else {\n                    // Show error message\n                    const errorAlert = document.createElement('div');\n                    errorAlert.className = 'alert alert-danger alert-dismissible fade show';\n                    errorAlert.innerHTML = `\n                        <strong>–û—à–∏–±–∫–∞!</strong> ${data.message}\n                        <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    `;\n                    form.prepend(errorAlert);\n                }\n            })\n            .catch(error => {\n                // Restore submit button\n                submitButton.innerHTML = originalText;\n                submitButton.disabled = false;\n                \n                // Show error message\n                const errorAlert = document.createElement('div');\n                errorAlert.className = 'alert alert-danger alert-dismissible fade show';\n                errorAlert.innerHTML = `\n                    <strong>–û—à–∏–±–∫–∞!</strong> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞.\n                    <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\n                        <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                `;\n                form.prepend(errorAlert);\n                \n                console.error('Error:', error);\n            });\n        });\n    });\n    \n    // Delete confirmation\n    const deleteButtons = document.querySelectorAll('[data-delete]');\n    deleteButtons.forEach(button => {\n        button.addEventListener('click', function(e) {\n            e.preventDefault();\n            \n            const confirmMessage = this.getAttribute('data-confirm') || '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç?';\n            \n            if (confirm(confirmMessage)) {\n                const action = this.getAttribute('href');\n                const row = this.closest('tr');\n                \n                fetch(action, {\n                    method: 'DELETE'\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.success) {\n                        // Remove row from table\n                        if (row) {\n                            row.remove();\n                        }\n                        \n                        // Show success message\n                        alert('–≠–ª–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.');\n                    } else {\n                        // Show error message\n                        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞: ' + data.message);\n                    }\n                })\n                .catch(error => {\n                    console.error('Error:', error);\n                    alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞.');\n                });\n            }\n        });\n    });\n    \n    // Copy to clipboard functionality\n    const copyButtons = document.querySelectorAll('[data-copy]');\n    copyButtons.forEach(button => {\n        button.addEventListener('click', function() {\n            const textToCopy = this.getAttribute('data-copy');\n            const originalText = this.innerHTML;\n            \n            navigator.clipboard.writeText(textToCopy).then(() => {\n                // Show success feedback\n                this.innerHTML = '‚úì –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';\n                setTimeout(() => {\n                    this.innerHTML = originalText;\n                }, 2000);\n            }).catch(err => {\n                console.error('Failed to copy: ', err);\n            });\n        });\n    });\n    \n    // Close alert buttons\n    document.addEventListener('click', function(e) {\n        if (e.target.closest('[data-dismiss=\"alert\"]')) {\n            const alert = e.target.closest('.alert');\n            if (alert) {\n                alert.remove();\n            }\n        }\n    });\n    \n    // Auto-hide alerts after 5 seconds\n    const autoHideAlerts = document.querySelectorAll('.alert[data-autohide=\"true\"]');\n    autoHideAlerts.forEach(alert => {\n        setTimeout(() => {\n            if (alert) {\n                alert.remove();\n            }\n        }, 5000);\n    });\n    \n    // Toggle password visibility\n    const togglePasswordButtons = document.querySelectorAll('.toggle-password');\n    togglePasswordButtons.forEach(button => {\n        button.addEventListener('click', function() {\n            const target = document.querySelector(this.getAttribute('data-target'));\n            const type = target.getAttribute('type') === 'password' ? 'text' : 'password';\n            target.setAttribute('type', type);\n            this.textContent = type === 'password' ? 'üëÅÔ∏è' : 'üîí';\n        });\n    });\n    \n    // Initialize tooltips\n    if (typeof $('[data-toggle=\"tooltip\"]').tooltip === 'function') {\n        $('[data-toggle=\"tooltip\"]').tooltip();\n    }\n    \n    // Initialize popovers\n    if (typeof $('[data-toggle=\"popover\"]').popover === 'function') {\n        $('[data-toggle=\"popover\"]').popover();\n    }\n    \n    // Handle modal events\n    $('.modal').on('shown.bs.modal', function () {\n        // Focus first input in modal\n        $(this).find('input:first').focus();\n    });\n    \n    // Handle tab navigation\n    const tabLinks = document.querySelectorAll('.nav-tabs a');\n    tabLinks.forEach(link => {\n        link.addEventListener('click', function(e) {\n            e.preventDefault();\n            \n            // Remove active class from all tabs\n            document.querySelectorAll('.nav-tabs a').forEach(tab => {\n                tab.classList.remove('active');\n            });\n            \n            // Add active class to clicked tab\n            this.classList.add('active');\n            \n            // Hide all tab panes\n            document.querySelectorAll('.tab-pane').forEach(pane => {\n                pane.classList.remove('show', 'active');\n            });\n            \n            // Show target tab pane\n            const target = document.querySelector(this.getAttribute('href'));\n            if (target) {\n                target.classList.add('show', 'active');\n            }\n        });\n    });\n    \n    // Handle date range picker\n    if (typeof $.fn.daterangepicker !== 'undefined') {\n        $('.date-range').daterangepicker({\n            locale: {\n                format: 'YYYY-MM-DD',\n                applyLabel: '–ü—Ä–∏–º–µ–Ω–∏—Ç—å',\n                cancelLabel: '–û—Ç–º–µ–Ω–∞',\n                customRangeLabel: '–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥',\n                daysOfWeek: ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'],\n                monthNames: ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',\n                             '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'],\n                firstDay: 1\n            },\n            ranges: {\n                '–°–µ–≥–æ–¥–Ω—è': [moment(), moment()],\n                '–í—á–µ—Ä–∞': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],\n                '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π': [moment().subtract(6, 'days'), moment()],\n                '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π': [moment().subtract(29, 'days'), moment()],\n                '–≠—Ç–æ—Ç –º–µ—Å—è—Ü': [moment().startOf('month'), moment().endOf('month')],\n                '–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]\n            },\n            startDate: moment().subtract(29, 'days'),\n            endDate: moment()\n        });\n    }\n    \n    // Handle chart initialization\n    if (typeof Chart !== 'undefined') {\n        // Example chart initialization\n        const chartElements = document.querySelectorAll('[data-chart]');\n        chartElements.forEach(element => {\n            const chartType = element.getAttribute('data-chart');\n            const chartData = JSON.parse(element.getAttribute('data-chart-data') || '{}');\n            \n            new Chart(element, {\n                type: chartType,\n                data: chartData,\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false\n                }\n            });\n        });\n    }\n    \n    // Handle real-time updates\n    function updateStatistics() {\n        fetch('/api/stats')\n        .then(response => response.json())\n        .then(data => {\n            // Update statistics elements\n            document.querySelectorAll('[data-stat]').forEach(element => {\n                const statKey = element.getAttribute('data-stat');\n                if (data[statKey] !== undefined) {\n                    element.textContent = data[statKey];\n                }\n            });\n        })\n        .catch(error => {\n            console.error('Error updating statistics:', error);\n        });\n    }\n    \n    // Update statistics every 30 seconds\n    setInterval(updateStatistics, 30000);\n    \n    // Initial statistics update\n    updateStatistics();\n});\n\n// Utility functions\nfunction formatNumber(num) {\n    return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \");\n}\n\nfunction formatDate(dateString) {\n    const options = { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' };\n    return new Date(dateString).toLocaleDateString('ru-RU', options);\n}\n\nfunction validateForm(form) {\n    let isValid = true;\n    \n    // Remove previous validation errors\n    form.querySelectorAll('.is-invalid').forEach(element => {\n        element.classList.remove('is-invalid');\n    });\n    \n    form.querySelectorAll('.invalid-feedback').forEach(element => {\n        element.remove();\n    });\n    \n    // Validate required fields\n    form.querySelectorAll('[required]').forEach(field => {\n        if (!field.value.trim()) {\n            isValid = false;\n            field.classList.add('is-invalid');\n            \n            const feedback = document.createElement('div');\n            feedback.className = 'invalid-feedback';\n            feedback.textContent = '–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.';\n            field.parentNode.appendChild(feedback);\n        }\n    });\n    \n    // Validate email fields\n    form.querySelectorAll('[type=\"email\"]').forEach(field => {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        if (field.value && !emailRegex.test(field.value)) {\n            isValid = false;\n            field.classList.add('is-invalid');\n            \n            const feedback = document.createElement('div');\n            feedback.className = 'invalid-feedback';\n            feedback.textContent = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å.';\n            field.parentNode.appendChild(feedback);\n        }\n    });\n    \n    return isValid;\n}\n\n// Debounce function for search inputs\nfunction debounce(func, wait) {\n    let timeout;\n    return function executedFunction(...args) {\n        const later = () => {\n            clearTimeout(timeout);\n            func(...args);\n        };\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n    };\n}\n\n// Export functionality\nfunction exportData(format, endpoint) {\n    const exportButton = document.querySelector(`[data-export=\"${format}\"]`);\n    const originalText = exportButton ? exportButton.innerHTML : '';\n    \n    if (exportButton) {\n        exportButton.innerHTML = '<span class=\"spinner spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span> –≠–∫—Å–ø–æ—Ä—Ç...';\n        exportButton.disabled = true;\n    }\n    \n    fetch(`${endpoint}?format=${format}`)\n    .then(response => {\n        if (response.ok) {\n            return response.blob();\n        }\n        throw new Error('Network response was not ok.');\n    })\n    .then(blob => {\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `export.${format}`;\n        document.body.appendChild(a);\n        a.click();\n        a.remove();\n        window.URL.revokeObjectURL(url);\n        \n        if (exportButton) {\n            exportButton.innerHTML = originalText;\n            exportButton.disabled = false;\n        }\n    })\n    .catch(error => {\n        console.error('Export error:', error);\n        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö.');\n        \n        if (exportButton) {\n            exportButton.innerHTML = originalText;\n            exportButton.disabled = false;\n        }\n    });\n}